# debug_strategy.py
import pandas as pd
import numpy as np
from config.config import Config
from src.bybit_client import BybitClient
from src.data_processor import DataProcessor
from src.logger import TradingLogger

class DebugStrategy:
    def __init__(self):
        self.client = BybitClient()
        self.data_processor = DataProcessor()
        self.logger = TradingLogger()
    
    def analyze_symbol_debug(self, symbol):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π"""
        self.logger.log(f"\nüîç –ê–ù–ê–õ–ò–ó {symbol}:", 'info')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.client.get_klines(symbol, '15', 100)
            if df is None or len(df) < 50:
                self.logger.log(f"  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df) if df else 0} —Å—Ç—Ä–æ–∫", 'info')
                return
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df = self.data_processor.calculate_technical_indicators(df)
            df = self.data_processor.calculate_volatility(df)
            
            current = df.iloc[-1]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.logger.log(f"  üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current['close']:.4f}", 'info')
            
            if 'rsi' in df.columns and not np.isnan(current['rsi']):
                self.logger.log(f"  üìà RSI: {current['rsi']:.2f} (–ø–æ—Ä–æ–≥–∏: {Config.RSI_OVERSOLD}/{Config.RSI_OVERBOUGHT})", 'info')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI —É—Å–ª–æ–≤–∏–π
                if current['rsi'] < Config.RSI_OVERSOLD:
                    self.logger.log(f"  ‚úÖ RSI –ü–ï–†–ï–ü–†–û–î–ê–ù–ù–û–°–¢–¨ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π BUY", 'info')
                elif current['rsi'] > Config.RSI_OVERBOUGHT:
                    self.logger.log(f"  ‚úÖ RSI –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π SELL", 'info')
                else:
                    self.logger.log(f"  ‚ùå RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ", 'info')
            
            if 'ema_short' in df.columns and 'ema_long' in df.columns:
                if not np.isnan(current['ema_short']) and not np.isnan(current['ema_long']):
                    self.logger.log(f"  üìä EMA Short: {current['ema_short']:.4f}, EMA Long: {current['ema_long']:.4f}", 'info')
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ EMA –∫—Ä–æ—Å—Å–∞
                    if current['ema_short'] > current['ema_long']:
                        self.logger.log(f"  ‚úÖ EMA BULLISH (–∫–æ—Ä–æ—Ç–∫–∞—è –≤—ã—à–µ –¥–ª–∏–Ω–Ω–æ–π)", 'info')
                    else:
                        self.logger.log(f"  ‚úÖ EMA BEARISH (–∫–æ—Ä–æ—Ç–∫–∞—è –Ω–∏–∂–µ –¥–ª–∏–Ω–Ω–æ–π)", 'info')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞
            volume_ratio = self._calculate_volume_ratio(df)
            self.logger.log(f"  üìä –û–±—ä–µ–º: {volume_ratio:.2f} –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (–º–∏–Ω: {Config.MIN_VOLUME_RATIO})", 'info')
            if volume_ratio < Config.MIN_VOLUME_RATIO:
                self.logger.log(f"  ‚ùå –°–õ–ò–®–ö–û–ú –ù–ò–ó–ö–ò–ô –û–ë–™–ï–ú", 'info')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = current['volatility'] if 'volatility' in df.columns else 0
            self.logger.log(f"  üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.4f}", 'info')
            
            # –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            from src.trading_strategy import TradingStrategy
            strategy = TradingStrategy()
            signal, details, strength = strategy.analyze_symbol(symbol, df)
            
            self.logger.log(f"  üéØ –ò–¢–û–ì–û–í–´–ô –°–ò–ì–ù–ê–õ: {signal} (—Å–∏–ª–∞: {strength:.2f})", 'info')
            self.logger.log(f"  üìù –î–µ—Ç–∞–ª–∏: {details}", 'info')
            
        except Exception as e:
            self.logger.log(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", 'info')
    
    def _calculate_volume_ratio(self, df):
        """–†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞"""
        if len(df) < 20:
            return 1.0
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].tail(20).mean()
        return current_volume / avg_volume if avg_volume > 0 else 1.0

def main():
    debug = DebugStrategy()
    
    print("=" * 50)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–†–ì–û–í–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 50)
    
    for symbol in Config.SYMBOLS:
        debug.analyze_symbol_debug(symbol)
    
    print("\n" + "=" * 50)
    print("üìä –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–¢–ï–ì–ò–ò:")
    print(f"RSI –ø–æ—Ä–æ–≥–∏: {Config.RSI_OVERSOLD}/{Config.RSI_OVERBOUGHT}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {Config.MIN_VOLUME_RATIO}")
    print(f"–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {Config.MAX_POSITIONS}")
    print(f"–†–∏–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {Config.RISK_PER_TRADE:.1%}")
    print("=" * 50)

if __name__ == "__main__":
    main()