import os
import sys
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def final_system_check():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from config.config import Config
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if not Config.BYBIT_API_KEY or not Config.BYBIT_API_SECRET:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OK")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit...")
    from src.bybit_client import BybitClient
    try:
        client = BybitClient()
        if not client.test_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")
            return False
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit OK")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
    try:
        balance = client.get_account_balance()
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å: {balance} USDT")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö...")
    from src.symbol_info import SymbolInfo
    try:
        symbol_info = SymbolInfo()
        test_symbols = ['SOLUSDT', 'XRPUSDT']
        for symbol in test_symbols:
            info = symbol_info.get_symbol_info(symbol)
            print(f"‚úÖ {symbol}: min_qty={info['min_order_qty']}, min_value={info['min_order_value']} USDT")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
    print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π...")
    try:
        for symbol in test_symbols:
            price = client.get_current_price(symbol)
            if price:
                quantity = symbol_info.calculate_proper_quantity(symbol, 10.0, price)
                is_valid, msg = symbol_info.validate_order_quantity(symbol, quantity, price)
                if is_valid:
                    print(f"‚úÖ {symbol}: —Ä–∞—Å—á–µ—Ç OK ({quantity} = {quantity * price:.2f} USDT)")
                else:
                    print(f"‚ùå {symbol}: —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - {msg}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return False
    
    print("=== –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! ===")
    print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python simple_professional_bot.py")
    return True

if __name__ == "__main__":
    load_dotenv()
    if final_system_check():
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        