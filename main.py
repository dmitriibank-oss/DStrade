import time
import schedule
from datetime import datetime
from config.config import Config
from src.bybit_client import BybitClient
from src.trading_strategy import TradingStrategy
from src.risk_manager import RiskManager
from src.position_manager import PositionManager
from src.logger import TradingLogger

class ProfessionalTradingBot:
    def __init__(self):
        self.client = BybitClient()
        self.strategy = TradingStrategy()
        self.logger = TradingLogger()
        self.position_manager = PositionManager(self.client)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.client.test_connection():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        initial_balance = self.client.get_account_balance()
        self.risk_manager = RiskManager(initial_balance)
        
        self.performance_stats = {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_pnl': 0,
            'cycles_completed': 0,
            'total_commission': 0
        }
        
        self.max_simultaneous_positions = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        self.logger.log(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º: {initial_balance} USDT", 'info', True)
    
    def run_trading_cycle(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        try:
            self.performance_stats['cycles_completed'] += 1
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            current_balance = self.client.get_account_balance()
            if current_balance:
                self.risk_manager.update_balance(current_balance)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
            if not self.risk_manager.can_trade():
                self.logger.log("–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞", 'warning')
                return
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.monitor_active_positions()
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            if self.position_manager.get_active_positions_count() >= self.max_simultaneous_positions:
                self.logger.log("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π", 'info')
                return
            
            # –ê–Ω–∞–ª–∏–∑ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è
            trades_executed = self.analyze_and_trade()
            
            self.log_performance()
            
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}", 'error')
    
    def analyze_and_trade(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        trades_executed = 0
        
        for symbol in Config.SYMBOLS:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                df = self.client.get_klines(symbol, limit=200)
                if df is None or len(df) < 50:
                    continue
                
                # –ê–Ω–∞–ª–∏–∑
                signal, details = self.strategy.analyze_symbol(symbol, df)
                current_price = self.client.get_current_price(symbol)
                
                if signal in ['BUY', 'SELL'] and current_price:
                    # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏
                    stop_loss, take_profit = self.risk_manager.calculate_stop_loss_take_profit(
                        current_price, signal
                    )
                    
                    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                    position_size_usdt = min(
                        Config.MAX_POSITION_SIZE,
                        self.risk_manager.current_balance * Config.RISK_PER_TRADE
                    )
                    position_size = position_size_usdt / current_price
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    is_valid, validation_msg = self.risk_manager.validate_trade_size(
                        symbol, position_size_usdt
                    )
                    if not is_valid:
                        self.logger.log(f"–ü—Ä–æ–ø—É—Å–∫ —Å–¥–µ–ª–∫–∏ {symbol}: {validation_msg}", 'info')
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                    is_profitable, net_profit, commission = self.risk_manager.is_trade_profitable(
                        symbol, current_price, position_size, take_profit
                    )
                    
                    if not is_profitable:
                        self.logger.log(f"–ü—Ä–æ–ø—É—Å–∫ —Å–¥–µ–ª–∫–∏ {symbol}: –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏", 'info')
                        continue
                    
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    if self.position_manager.open_position(
                        symbol, signal, position_size, current_price, stop_loss, take_profit
                    ):
                        trades_executed += 1
                        self.performance_stats['total_trades'] += 1
                        self.performance_stats['total_commission'] += commission
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
                        time.sleep(1)
                
            except Exception as e:
                self.logger.log(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", 'error')
        
        return trades_executed
    
    def monitor_active_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        for symbol in list(self.position_manager.active_positions.keys()):
            try:
                current_price = self.client.get_current_price(symbol)
                if not current_price:
                    continue
                
                position = self.position_manager.active_positions[symbol]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                if (position['side'] == 'Buy' and current_price <= position['stop_loss']) or \
                   (position['side'] == 'Sell' and current_price >= position['stop_loss']):
                    self.position_manager.close_position(symbol, "Stop Loss")
                
                elif (position['side'] == 'Buy' and current_price >= position['take_profit']) or \
                     (position['side'] == 'Sell' and current_price <= position['take_profit']):
                    self.position_manager.close_position(symbol, "Take Profit")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–∑–∏—Ü–∏–∏
                self.position_manager.check_position_health(symbol, current_price)
                
            except Exception as e:
                self.logger.log(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}", 'error')
    
    def log_performance(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        win_rate = 0
        if self.performance_stats['total_trades'] > 0:
            win_rate = (self.performance_stats['winning_trades'] / 
                       self.performance_stats['total_trades'] * 100)
        
        avg_commission = 0
        if self.performance_stats['total_trades'] > 0:
            avg_commission = self.performance_stats['total_commission'] / self.performance_stats['total_trades']
        
        performance_msg = (
            f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "
            f"–¶–∏–∫–ª—ã: {self.performance_stats['cycles_completed']} | "
            f"–°–¥–µ–ª–∫–∏: {self.performance_stats['total_trades']} | "
            f"–í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}% | "
            f"–û–±—â–∏–π PnL: {self.performance_stats['total_pnl']:.2f} USDT | "
            f"–ö–æ–º–∏—Å—Å–∏–∏: {self.performance_stats['total_commission']:.2f} USDT | "
            f"–ë–∞–ª–∞–Ω—Å: {self.risk_manager.current_balance:.2f} USDT"
        )
        
        self.logger.log(performance_msg, 'info')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.log("üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–†–ì–û–í–´–ô –ëOT –ó–ê–ü–£–©–ï–ù!", 'info', True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(2).minutes.do(self.run_trading_cycle)
        schedule.every(30).minutes.do(self.log_performance)
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        self.run_trading_cycle()
        
        self.logger.log("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", 'info')
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(1)
            except KeyboardInterrupt:
                self.logger.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 'info', True)
                break
            except Exception as e:
                self.logger.log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", 'error')
                time.sleep(60)

if __name__ == "__main__":
    try:
        bot = ProfessionalTradingBot()
        bot.run()
    except Exception as e:
        logger = TradingLogger()
        logger.log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", 'error', True)