import time
import schedule
from datetime import datetime
from config.config import Config
from src.bybit_client import BybitClient
from src.trading_strategy import TradingStrategy
from src.position_manager import PositionManager
from src.risk_manager import RiskManager
from src.symbol_info import SymbolInfo
from src.logger import TradingLogger

class ProfessionalTradingBot:
    def __init__(self):
        self.logger = TradingLogger()
        self.client = BybitClient()
        self.strategy = TradingStrategy()
        self.symbol_info = SymbolInfo()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        self.initial_balance = self.client.get_account_balance()
        self.risk_manager = RiskManager(self.initial_balance)
        self.position_manager = PositionManager(self.client)
        
        self.cycle_count = 0
        self.total_trades = 0
        
        self.logger.log(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º: {self.initial_balance} USDT", 'info')
    
    def run_trading_cycle(self):
        """–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.cycle_count += 1
        self.logger.log(f"–¶–∏–∫–ª #{self.cycle_count} –≤ {datetime.now()}", 'info')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = self.client.get_account_balance()
            self.risk_manager.update_balance(balance)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏
            if not self.risk_manager.can_trade():
                self.logger.log("–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ä–∏—Å–∫–∞–º", 'warning')
                return
            
            active_positions = self.position_manager.get_active_positions_count()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            if active_positions < Config.MAX_POSITIONS:
                for symbol in Config.SYMBOLS:
                    if symbol not in self.position_manager.active_positions:
                        self.process_symbol(symbol, balance)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.log_statistics(balance, active_positions)
            
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}", 'error')
    
    def process_symbol(self, symbol, balance):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.client.get_klines(symbol, '15', 100)
            if df is None or len(df) < 50:
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            signal, details, signal_strength = self.strategy.analyze_symbol(symbol, df)
            
            if signal != 'HOLD':
                current_price = self.client.get_current_price(symbol)
                if current_price:
                    self.execute_trade(symbol, signal, details, current_price, balance, signal_strength)
                    
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}", 'error')
    
    def execute_trade(self, symbol, signal, details, current_price, balance, signal_strength):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        try:
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
            if signal == 'BUY':
                stop_loss = current_price * (1 - Config.STOP_LOSS_PCT)
                take_profit = current_price * (1 + Config.TAKE_PROFIT_PCT)
            else:
                stop_loss = current_price * (1 + Config.STOP_LOSS_PCT)
                take_profit = current_price * (1 - Config.TAKE_PROFIT_PCT)
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = self.strategy.calculate_position_size(
                balance, current_price, stop_loss, signal_strength
            )
            
            if position_size <= 0:
                return
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            quantity = self.symbol_info.calculate_proper_quantity(
                symbol, position_size * current_price, current_price
            )
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            if self.position_manager.open_position(symbol, signal, quantity, current_price, stop_loss, take_profit):
                self.total_trades += 1
                self.risk_manager.record_trade(symbol, signal, current_price, quantity, stop_loss, take_profit)
                self.logger.log(
                    f"üéØ –°–î–ï–õ–ö–ê: {signal} {quantity:.4f} {symbol} | "
                    f"–¶–µ–Ω–∞: {current_price:.4f} | –°–∏–ª–∞: {signal_strength:.1f}",
                    'info', 
                    True
                )
                
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}", 'error')
    
    def log_statistics(self, balance, active_positions):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.log(
            f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê | –¶–∏–∫–ª—ã: {self.cycle_count} | "
            f"–°–¥–µ–ª–∫–∏: {self.total_trades} | –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_positions} | "
            f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT",
            'info'
        )

def main():
    try:
        bot = ProfessionalTradingBot()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not bot.client.test_connection():
            bot.logger.log("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API", 'error', True)
            return
        
        bot.logger.log("üöÄ –¢–û–†–ì–û–í–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù", 'info', True)
        bot.logger.log(f"–ë–∞–ª–∞–Ω—Å: {bot.initial_balance} USDT", 'info')
        bot.logger.log(f"–°–∏–º–≤–æ–ª—ã: {', '.join(Config.SYMBOLS)}", 'info')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        schedule.every(10).minutes.do(bot.run_trading_cycle)
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        bot.run_trading_cycle()
        
        bot.logger.log("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", 'info')
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(30)
            except KeyboardInterrupt:
                bot.logger.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 'info', True)
                break
            except Exception as e:
                bot.logger.log(f"–û—à–∏–±–∫–∞: {e}", 'error')
                time.sleep(60)
                
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()