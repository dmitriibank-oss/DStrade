import time
import schedule
from datetime import datetime
from config.config import Config
from src.bybit_client import BybitClient
from src.symbol_info import SymbolInfo
from src.logger import TradingLogger

class SimpleProfessionalBot:
    def __init__(self):
        self.client = BybitClient()
        self.symbol_info = SymbolInfo()
        self.logger = TradingLogger()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.client.test_connection():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
        self.balance = self.client.get_account_balance()
        self.initial_balance = self.balance
        
        self.performance_stats = {
            'total_trades': 0,
            'successful_trades': 0,
            'failed_trades': 0,
            'cycles_completed': 0,
            'total_volume': 0,
            'rejected_trades': 0
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        self.test_symbols = ['SOLUSDT', 'XRPUSDT']
        
        self.logger.log(f"–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º: {self.balance} USDT", 'info', True)
    
    def simple_analysis(self, symbol):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self.client.get_current_price(symbol)
            if not current_price:
                return 'HOLD'
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self.client.get_klines(symbol, limit=50)
            if df is None or len(df) < 20:
                return 'HOLD'
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            current_close = df['close'].iloc[-1]
            prev_close = df['close'].iloc[-2]
            sma_10 = df['close'].tail(10).mean()
            sma_20 = df['close'].tail(20).mean()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
            signals = []
            
            # –¢—Ä–µ–Ω–¥
            if current_close > sma_20:
                signals.append('UPTREND')
            else:
                signals.append('DOWNTREND')
            
            # –ú–æ–º–µ–Ω—Ç—É–º
            if current_close > prev_close:
                signals.append('UP_MOMENTUM')
            else:
                signals.append('DOWN_MOMENTUM')
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–∏ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –∏ –º–æ–º–µ–Ω—Ç—É–º–µ
            if 'UPTREND' in signals and 'UP_MOMENTUM' in signals:
                return 'BUY'
            elif 'DOWNTREND' in signals and 'DOWN_MOMENTUM' in signals:
                return 'SELL'
            else:
                return 'HOLD'
                
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", 'error')
            return 'HOLD'
    
    def calculate_position_size(self, symbol, current_price):
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Bybit"""
        try:
            # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (—É–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            base_position_usdt = 10.0  # 10 USDT –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            quantity = self.symbol_info.calculate_proper_quantity(symbol, base_position_usdt, current_price)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_valid, validation_msg = self.symbol_info.validate_order_quantity(symbol, quantity, current_price)
            
            if not is_valid:
                self.logger.log(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {symbol}: {validation_msg}", 'warning')
                return 0
            
            order_value = quantity * current_price
            self.logger.log(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {symbol}: {quantity} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_value:.2f} USDT)", 'info')
            
            return quantity
            
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}", 'error')
            return 0
    
    def run_trading_cycle(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        try:
            self.performance_stats['cycles_completed'] += 1
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.logger.log(f"–¶–∏–∫–ª #{self.performance_stats['cycles_completed']} –≤ {current_time}", 'info')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            self.balance = self.client.get_account_balance()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            for symbol in self.test_symbols:
                signal = self.simple_analysis(symbol)
                current_price = self.client.get_current_price(symbol)
                
                if signal in ['BUY', 'SELL'] and current_price:
                    self.logger.log(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal} –ø–æ —Ü–µ–Ω–µ {current_price}", 'info')
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                    position_size = self.calculate_position_size(symbol, current_price)
                    
                    if position_size > 0:
                        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
                        order = self.client.place_order(symbol, signal, position_size)
                        if order:
                            self.performance_stats['total_trades'] += 1
                            self.performance_stats['successful_trades'] += 1
                            order_value = position_size * current_price
                            self.performance_stats['total_volume'] += order_value
                            self.logger.log(f"–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {signal} {position_size} {symbol} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_value:.2f} USDT)", 'info', True)
                        else:
                            self.performance_stats['total_trades'] += 1
                            self.performance_stats['failed_trades'] += 1
                            self.logger.log(f"–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {signal} {position_size} {symbol}", 'warning')
                    else:
                        self.performance_stats['rejected_trades'] += 1
                        self.logger.log(f"–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}", 'info')
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                    time.sleep(2)
                else:
                    self.logger.log(f"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol} –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É", 'info')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            self.log_performance()
            
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}", 'error')
    
    def log_performance(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        success_rate = 0
        if self.performance_stats['total_trades'] > 0:
            success_rate = (self.performance_stats['successful_trades'] / self.performance_stats['total_trades']) * 100
        
        avg_trade_size = 0
        if self.performance_stats['successful_trades'] > 0:
            avg_trade_size = self.performance_stats['total_volume'] / self.performance_stats['successful_trades']
        
        performance_msg = (
            f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | "
            f"–¶–∏–∫–ª—ã: {self.performance_stats['cycles_completed']} | "
            f"–°–¥–µ–ª–∫–∏: {self.performance_stats['total_trades']} | "
            f"–£—Å–ø–µ—à–Ω—ã–µ: {self.performance_stats['successful_trades']} | "
            f"–ù–µ—É–¥–∞—á–Ω—ã–µ: {self.performance_stats['failed_trades']} | "
            f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {self.performance_stats['rejected_trades']} | "
            f"–£—Å–ø–µ—Ö: {success_rate:.1f}% | "
            f"–û–±—ä–µ–º: {self.performance_stats['total_volume']:.2f} USDT | "
            f"–ë–∞–ª–∞–Ω—Å: {self.balance:.2f} USDT"
        )
        self.logger.log(performance_msg, 'info')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.log("üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù!", 'info', True)
        self.logger.log(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(self.test_symbols)}", 'info')
        self.logger.log(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.balance} USDT", 'info')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(5).minutes.do(self.run_trading_cycle)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        self.run_trading_cycle()
        
        self.logger.log("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", 'info')
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(1)
            except KeyboardInterrupt:
                self.logger.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 'info', True)
                break
            except Exception as e:
                self.logger.log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", 'error')
                time.sleep(60)

if __name__ == "__main__":
    try:
        bot = SimpleProfessionalBot()
        bot.run()
    except Exception as e:
        logger = TradingLogger()
        logger.log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", 'error', True)